[{"name":"app.R","content":"# app.R\n\n# Load necessary libraries\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly) # For interactive plots and hover effects\nlibrary(RColorBrewer) # Added for better multi-country chart colors\nlibrary(scales) # Added for axis formatting\nlibrary(ggtext)\n\n# Load and clean data\ndata <- read.csv(\"https://raw.githubusercontent.com/alexis-ribal/cwon2024/refs/heads/main/data/cwon_data_raw.csv\")\n\ndataclean <- data %>%\n  select(countryname, year, pop, ncwi, torn_real_pk, torn_real_renew, torn_real_nonrenew, torn_real_hc, pk_cd, renew_cd, nonrenew_cd, hc_cd)\n\n\n# --- 1. Generate the Panel Data (as per your previous request) ---\n# This code will be run once when the Shiny app starts\ncountries <- unique(dataclean$countryname)\nyears <- 1995:2020 # Adjust years to match your data range if different\nvariables <- c(\"pop\", \"ncwi\", \"torn_real_pk\", \"torn_real_renew\", \"torn_real_nonrenew\", \"torn_real_hc\", \"pk_cd\", \"renew_cd\", \"nonrenew_cd\", \"hc_cd\")\n\n# Reshape to a wider format for easier plotting\npanel_data_wide <- dataclean %>%\n  arrange(countryname, year) # Sort for better readability\n\n# Variables to be used in plots (excluding 'pop' for some, including for others)\n# These lists define the exact column names from your 'dataclean'\ntorn_no_pop <- c(\"ncwi\", \"torn_real_pk\", \"torn_real_renew\", \"torn_real_nonrenew\", \"torn_real_hc\")\ncd_no_pop <- c(\"pk_cd\", \"renew_cd\", \"nonrenew_cd\", \"hc_cd\")\nall_variables_for_d <- c(\"pop\", torn_no_pop, cd_no_pop) # All possible variables for Chart D\n\n# --- Variable Labels Mapping ---\n# This named vector maps internal variable names to user-friendly labels\nvariable_labels <- c(\n  \"ncwi\" = \"Wealth index\",\n  \"torn_real_pk\" = \"Produced K\",\n  \"torn_real_renew\" = \"Renewable natural K\",\n  \"torn_real_nonrenew\" = \"Nonrenewable natural K\",\n  \"torn_real_hc\" = \"Human K\",\n  \"pk_cd\" = \"Produced K\", # Adding labels for CD variables too\n  \"renew_cd\" = \"Renewable natural K\",\n  \"nonrenew_cd\" = \"Nonrenewable natural K\",\n  \"hc_cd\" = \"Human K\",\n  \"pop\" = \"Population\" # For Quadrant D if 'pop' is selected\n)\n\n# --- Create named lists for selectInput choices ---\n# This allows display of labels while passing variable names as values\ntorn_no_pop_choices <- setNames(torn_no_pop, variable_labels[torn_no_pop])\nall_variables_for_d_choices <- setNames(all_variables_for_d, variable_labels[all_variables_for_d])\n\n# --- Define the desired x-axis breaks ---\nx_axis_breaks <- c(1995, 2000, 2005, 2010, 2015, 2020)\n\n# --- Define The Economist-like ggplot2 theme ---\ntheme_economist <- function() {\n  theme_minimal() +\n    theme(\n      plot.title = element_text(size = 18, face = \"bold\", color = \"#1f3552\", hjust = 0), # Adjusted title font size\n      plot.subtitle = element_text(size = 12, hjust = 0),\n      axis.title = element_text(size = 10, color = \"grey40\"),\n      axis.text = element_text(size = 10), color = \"grey40\",\n      panel.grid.major.x = element_line(color = \"grey80\", linetype = \"dotted\"),\n      panel.grid.minor.x = element_blank(),\n      panel.grid.major.y = element_line(color = \"grey80\", linetype = \"dotted\"),\n      panel.grid.minor.y = element_blank(),\n      axis.line = element_line(color = \"grey60\"),\n      axis.ticks = element_line(color = \"grey60\"),\n      legend.position = \"bottom\",\n      legend.title = element_blank(),\n      legend.text = element_text(size = 8),\n      legend.key.size = unit(0.5, \"cm\"),\n      plot.margin = margin(10, 10, 10, 10),\n      axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)\n    )\n}\n\n# --- Shiny UI Definition ---\nui <- fluidPage(\n  tags$head(\n    tags$style(HTML(\"\n      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n      body {\n        font-family: 'Inter', sans-serif;\n        background-color: #f8f8f8;\n        color: #333;\n      }\n      .container-fluid {\n        padding: 20px;\n      }\n      .panel-heading {\n        background-color: #293368;\n        color: white;\n        padding: 10px;\n        font-size: 1.2em;\n        font-weight: 600;\n        border-radius: 8px 8px 0 0;\n      }\n      .well {\n        background-color: #ffffff;\n        border: 1px solid #e0e0e0;\n        border-radius: 8px;\n        box-shadow: 0 4px 8px rgba(0,0,0,.05);\n        padding: 20px;\n      }\n      .chart-container {\n        background-color: #ffffff;\n        border: 1px solid #e0e0e0;\n        border-radius: 8px;\n        box-shadow: 0 4px 8px rgba(0,0,0,.05);\n        padding: 15px;\n        margin-bottom: 20px;\n      }\n      .title {\n        text-align: center;\n        font-size: 2.5em;\n        font-weight: 700;\n        color: #002D54;\n        margin-bottom: 30px;\n        padding-top: 20px;\n      }\n      .selectize-input {\n        border-radius: 5px !important;\n        border: 1px solid #ccc !important;\n      }\n      .form-control {\n        border-radius: 5px !important;\n        border: 1px solid #ccc !important;\n      }\n      /* Custom style for the Data Source button to make it look like a regular button */\n      .btn-data-source {\n        background-color: #007bff; /* Blue color */\n        color: white; /* White text */\n        border: 1px solid #007bff; /* Blue border */\n        border-radius: 5px;\n        padding: 8px 12px;\n        font-size: 14px;\n        width: 100%; /* Make it full width like download button */\n        margin-top: 5px; /* Adjust spacing here */\n        text-align: center;\n        text-decoration: none; /* Remove underline */\n        display: inline-block; /* Make it behave like a block element for width */\n        cursor: pointer;\n      }\n      .btn-data-source:hover {\n        background-color: #0056b3; /* Slightly darker blue on hover */\n        border-color: #0056b3;\n      }\n      /* Style for the Source text */\n      .source-text {\n        font-size: 1em; /* Adjust as needed */\n        font-weight: 500;\n        color: #555;\n        margin-top: 15px; /* Space above Source text */\n        margin-bottom: 5px; /* Space below Source text */\n        display: block; /* Ensures it takes its own line */\n      }\n    \"))\n  ),\n  \n  # Dashboard Title\n  div(class = \"title\", \"The Changing Wealth of Nations 2024\"),\n  \n  # Main layout with 3 columns\n  fluidRow(\n    # Column 1: Controls (20% width)\n    column(2,\n           div(class = \"well\",\n               div(class = \"panel-heading\", \"Dashboard Controls\"),\n               br(),\n               # Country Selection for Quadrants A, B, C, D\n               selectInput(\n                 inputId = \"country_select_single\",\n                 label = \"Select Country:\",\n                 choices = countries,\n                 selected = \"Argentina\"\n               ),\n               # Toggle for 'pop' division\n               checkboxInput(\n                 inputId = \"divide_by_pop\",\n                 label = \"Per capita values\",\n                 value = FALSE\n               ),\n               # Multi-select Countries for Quadrant D\n               selectInput(\n                 inputId = \"country_select_multi\",\n                 label = \"Select countries to compare (up to 4):\",\n                 choices = countries,\n                 selected = c(\"Argentina\", \"Brazil\", \"Mexico\"),\n                 multiple = TRUE\n               ),\n               # Variable selector for Quadrant A\n               selectInput(\n                 inputId = \"variable_a_select\",\n                 label = \"Select variable for Figure 1:\",\n                 choices = torn_no_pop_choices,\n                 selected = \"ncwi\"\n               ),\n               # Variable selector for Quadrant D\n               selectInput(\n                 inputId = \"variable_d_select\",\n                 label = \"Select variable for Figure 4:\",\n                 choices = all_variables_for_d_choices,\n                 selected = \"ncwi\"\n               ),\n               br(), # Add a break for spacing\n               # NEW: Download Button for CSV Export\n               downloadButton(\"downloadData\", \"Download Country Data\"),\n               br(), # Add a break for spacing\n               br(), # Add a break for spacing\n               tags$span(class = \"source-text\", \"Source:\"),\n               # NEW: Data Source Button\n               tags$a(href = \"https://datacatalog.worldbank.org/search/dataset/0042066/Wealth-Accounting\",\n                      rel=\"noopener noreferrer\",\n                      target = \"_blank\", # Opens link in a new tab\n                      class = \"btn btn-data-source\", # Apply custom CSS class\n                      \"Data\"\n              ),\n              br(), # Add a break for spacing\n              # NEW: Data Source Button\n              tags$a(href = \"https://www.worldbank.org/en/publication/the-changing-wealth-of-nations\",\n                     rel=\"noopener noreferrer\",\n                     target = \"_blank\", # Opens link in a new tab\n                     class = \"btn btn-data-source\", # Apply custom CSS class\n                     \"Full Report\"\n              )\n           )\n    ),\n    \n    # Column 2: Quadrants A & B (40% width)\n    column(5,\n           # Quadrant A: Bar Chart\n           div(class = \"chart-container\",\n               div(class = \"panel-heading\", \"Figure 1: Annual Wealth in Real Chained 2019 US$\"),\n               plotlyOutput(\"chartA\", height = \"350px\")\n           ),\n           # Quadrant B: Indexed Line Chart\n           div(class = \"chart-container\",\n               div(class = \"panel-heading\", \"Figure 3: Indexed Wealth Values (1995=100)\"),\n               plotlyOutput(\"chartB\", height = \"350px\")\n           )\n    ),\n    \n    # Column 3: Quadrants C & D (40% width)\n    column(5,\n           # Quadrant C: Stacked Bar Chart (Percentages)\n           div(class = \"chart-container\",\n               div(class = \"panel-heading\", \"Figure 2: Share in Total Wealth (%)\"),\n               plotlyOutput(\"chartC\", height = \"350px\")\n           ),\n           # Quadrant D: Multi-Country Line Chart\n           div(class = \"chart-container\",\n               div(class = \"panel-heading\", \"Figure 4: Wealth Comparison Across Countries\"),\n               plotlyOutput(\"chartD\", height = \"350px\")\n           )\n    )\n  )\n)\n\n# --- Shiny Server Logic ---\nserver <- function(input, output, session) {\n  \n  # Reactive expression for primary selected country's data\n  reactive_data_primary <- reactive({\n    req(input$country_select_single)\n    \n    data <- panel_data_wide %>%\n      filter(countryname == input$country_select_single) %>%\n      select(year, countryname, all_of(variables))\n    \n    if (input$divide_by_pop && \"pop\" %in% names(data) && all(data$pop != 0)) {\n      for (var in c(torn_no_pop, cd_no_pop)) {\n        data[[var]] <- data[[var]] / data$pop\n      }\n      if (input$variable_d_select == \"pop\") {\n        data$pop <- data$pop / data$pop\n      }\n    } else if (input$divide_by_pop && \"pop\" %in% names(data) && any(data$pop == 0)) {\n      showNotification(\"Cannot divide by 'pop' due to zero values in 'pop'.\", type = \"warning\", duration = 5)\n    }\n    data\n  })\n  \n  # Reactive expression for multi-country data for Quadrant D\n  reactive_data_multi <- reactive({\n    req(input$country_select_multi)\n    \n    selected_countries <- input$country_select_multi\n    if (length(selected_countries) > 4) {\n      selected_countries <- selected_countries[1:4]\n    }\n    \n    data <- panel_data_wide %>%\n      filter(countryname %in% selected_countries) %>%\n      select(year, countryname, all_of(variables))\n    \n    if (input$divide_by_pop && \"pop\" %in% names(data)) {\n      data <- data %>%\n        group_by(countryname) %>%\n        mutate(across(all_of(c(torn_no_pop, cd_no_pop, \"pop\")), ~ ifelse(pop != 0, .x / pop, NA_real_))) %>%\n        ungroup()\n    }\n    data\n  })\n  \n  # --- Quadrant A: Bar Chart ---\n  output$chartA <- renderPlotly({\n    req(input$variable_a_select)\n    data_to_plot <- reactive_data_primary()\n    \n    p <- ggplot(data_to_plot, aes(x = as.factor(year), y = .data[[input$variable_a_select]],\n                                  text = paste(\"Year: \", year, \"<br>\",\n                                               \"Value: \", format(.data[[input$variable_a_select]], big.mark = \",\")))) +\n      geom_bar(stat = \"identity\", fill = \"#293368\", width = 0.7) +\n      labs(title = paste(\"<b>Annual\", variable_labels[input$variable_a_select], \"for\", input$country_select_single, \"<\/b>\"),\n           x = \"Year\",\n           y = \"Real chained 2019 US$ (Billions)\",\n           color=\"\") +\n      scale_y_continuous(labels = label_comma(scale = 1e-9, suffix = \"B\")) +\n      scale_x_discrete(breaks = x_axis_breaks) +\n      theme_economist() +\n      theme(axis.title.x = element_blank())\n    \n    # NEW: Use plotly layout for title text wrapping\n    ggplotly(p, tooltip = \"text\") %>%\n      layout(\n        hoverlabel = list(bgcolor = \"white\", font = list(color = \"black\")),\n        title = list(text = p$labels$title,\n                     x = 0, # Align title to the left\n                     y = 0.95, # Adjust vertical position if needed\n                     xanchor = \"left\", # Anchor to the left\n                     font = list(size = 16), # Ensure plotly uses this size\n                     # This enables text wrapping for the title\n                     automargin = TRUE\n        )\n      )\n    \n    \n  })\n  \n  # --- Quadrant B: Indexed Line Chart (1995 = 100) ---\n  output$chartB <- renderPlotly({\n    data_to_plot <- reactive_data_primary() %>%\n      select(year, all_of(torn_no_pop)) %>%\n      pivot_longer(\n        cols = all_of(torn_no_pop),\n        names_to = \"Variable\",\n        values_to = \"Value\"\n      ) %>%\n      mutate(Variable = factor(Variable, levels = torn_no_pop, labels = variable_labels[torn_no_pop])) %>%\n      group_by(Variable) %>%\n      mutate(\n        value_1995 = Value[year == 1995][1],\n        Indexed_Value = ifelse(value_1995 != 0 & !is.na(value_1995), (Value / value_1995) * 100, NA_real_)\n      ) %>%\n      ungroup() %>%\n      filter(!is.na(Indexed_Value))\n    \n    colors_b <- c(\n      \"Produced K\" = \"#293368\",\n      \"Renewable natural K\" = \"#EC622B\",\n      \"Nonrenewable natural K\" = \"#69BA95\",\n      \"Human K\" = \"#E7D74B\",\n      \"Wealth index\" = \"gray\"\n    )\n    \n    p <- ggplot(data_to_plot, aes(x = year, y = Indexed_Value, color = Variable, group = Variable,\n                                  text = paste(\"Variable: \", Variable, \"<br>\",\n                                               \"Year: \", year, \"<br>\",\n                                               \"Indexed Value (1995=100): \", round(Indexed_Value, 2)))) +\n      geom_line(size = 1) +\n      geom_point(size = 2) +\n      labs(title = paste(\"<b>Indexed Values (1995=100) for\", input$country_select_single,\"<\/b>\"),\n           x = \"Year\",\n           y = \"Indexed Value (1995=100)\",\n           color=\"\") +\n      scale_x_continuous(breaks = x_axis_breaks) +\n      scale_color_manual(values = colors_b) +\n      theme_economist() +\n      theme(legend.position = \"bottom\") +\n      theme(axis.title.x = element_blank())\n    \n    # NEW: Use plotly layout for title text wrapping\n    ggplotly(p, tooltip = \"text\") %>%\n      layout(\n        hoverlabel = list(bgcolor = \"white\", font = list(color = \"black\")),\n        title = list(text = p$labels$title,\n                     x = 0, # Align title to the left\n                     y = 0.95, # Adjust vertical position if needed\n                     xanchor = \"left\", # Anchor to the left\n                     font = list(size = 16), # Ensure plotly uses this size\n                     automargin = TRUE\n        )\n      )\n  })\n  \n  # --- Quadrant C: Stacked Bar Chart (Percentages) ---\n  output$chartC <- renderPlotly({\n    data_to_plot <- reactive_data_primary() %>%\n      select(year, all_of(cd_no_pop)) %>%\n      pivot_longer(\n        cols = all_of(cd_no_pop),\n        names_to = \"Variable\",\n        values_to = \"Value\"\n      ) %>%\n      mutate(Variable = factor(Variable, levels = cd_no_pop, labels = variable_labels[cd_no_pop])) %>%\n      group_by(year) %>%\n      mutate(\n        sum_of_vars = sum(Value, na.rm = TRUE),\n        Percentage = ifelse(sum_of_vars != 0, Value / sum_of_vars * 100, NA_real_)\n      ) %>%\n      ungroup()\n    \n    colors_c <- c(\n      \"Produced K\" = \"#293368\",\n      \"Renewable natural K\" = \"#EC622B\",\n      \"Nonrenewable natural K\" = \"#69BA95\",\n      \"Human K\" = \"#E7D74B\"\n    )\n    \n    p <- ggplot(data_to_plot, aes(x = as.factor(year), y = Percentage, fill = Variable,\n                                  text = paste(\"Variable: \", Variable, \"<br>\",\n                                               \"Year: \", year, \"<br>\",\n                                               \"Percentage: \", round(Percentage, 2), \"%\"))) +\n      geom_bar(stat = \"identity\", position = \"stack\", width = 0.7) +\n      labs(title = paste(\"<b>Variable Percentage Share for\", input$country_select_single,\"<\/b>\"),\n           x = \"Year\",\n           y = \"Percentage (%)\",\n           color=\"\") +\n      scale_y_continuous(labels = scales::percent_format(scale = 1)) +\n      scale_x_discrete(breaks = x_axis_breaks) +\n      scale_fill_manual(values = colors_c) +\n      theme_economist() +\n      theme(axis.title.x = element_blank(),\n            legend.position = \"bottom\") \n    \n    # NEW: Use plotly layout for title text wrapping\n    ggplotly(p, tooltip = \"text\") %>%\n      layout(\n        hoverlabel = list(bgcolor = \"white\", font = list(color = \"black\")),\n        title = list(text = p$labels$title,\n                     x = 0, # Align title to the left\n                     y = 0.95, # Adjust vertical position if needed\n                     xanchor = \"left\", # Anchor to the left\n                     font = list(size = 16), # Ensure plotly uses this size\n                     automargin = TRUE\n        )\n      )\n  })\n  \n  # --- Quadrant D: Multi-Country Line Chart ---\n  output$chartD <- renderPlotly({\n    req(input$variable_d_select)\n    data_to_plot <- reactive_data_multi()\n    \n    num_countries <- length(unique(data_to_plot$countryname))\n    colors_d <- c(\"#293368\", \"#EC622B\", \"#69BA95\", \"#E7D74B\")\n    \n    p <- ggplot(data_to_plot, aes(x = year, y = .data[[input$variable_d_select]], color = countryname, group = countryname,\n                                  text = paste(\"Country: \", countryname, \"<br>\",\n                                               \"Year: \", year, \"<br>\",\n                                               variable_labels[input$variable_d_select], \": \", format(.data[[input$variable_d_select]], big.mark = \",\")))) +\n      geom_line(size = 1) +\n      geom_point(size = 2) +\n      labs(title = paste(\"<b>\",variable_labels[input$variable_d_select], \"Comparison Across Countries<\/b>\"),\n           x = \"Year\",\n           y = \"Real chained 2019 US$ (Billions)\",\n           color='') +\n      scale_x_continuous(breaks = x_axis_breaks) +\n      scale_y_continuous(labels = label_comma(scale = 1e-9, suffix = \"B\")) +\n      scale_color_manual(values = colors_d) +\n      theme_economist() +\n      theme(legend.position = \"bottom\") +\n      theme(axis.title.x = element_blank())\n\n    # NEW: Use plotly layout for title text wrapping\n    ggplotly(p, tooltip = \"text\") %>%\n      layout(\n        hoverlabel = list(bgcolor = \"white\", font = list(color = \"black\")),\n        title = list(text = p$labels$title,\n                     x = 0, # Align title to the left\n                     y = 0.95, # Adjust vertical position if needed\n                     xanchor = \"left\", # Anchor to the left\n                     font = list(size = 16), # Ensure plotly uses this size\n                     automargin = TRUE\n        )\n      )\n  })\n  \n  # NEW: Download Handler for CSV Export\n  output$downloadData <- downloadHandler(\n    filename = function() {\n      # Creates a dynamic filename based on the selected country and current date\n      paste0(input$country_select_single, \"_wealth_data_\", Sys.Date(), \".csv\")\n    },\n    content = function(file) {\n      # Writes the data from reactive_data_primary() to a CSV file.\n      # This will export the data for the currently selected single country,\n      # with per capita values if the checkbox is ticked.\n      write.csv(reactive_data_primary(), file, row.names = FALSE)\n    }\n  )\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)","type":"text"}]
